#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('codecraft-socket:server');
var http = require('http');
var _ = require('underscore');


/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server);

var clients = {}

io.sockets.on('connection', function(socket){
//    socket.on('send', function(data){
//        socket.broadcast.emit('message', data.data);
//    });

    socket.on('JOIN_SHAREBOX', function(data) {

        if(data.room !== 'common'){
          socket.join(data.room);
          if(clients[data.room]){
            for (var i = clients[data.room].members.length - 1; i >= 0; i--) {
              if(clients[data.room].members[i].clientId == data.id) {
                clients[data.room].members[i].isPending = false;
                clients[data.room].members[i].socketId = socket.id;
              }
            };
            
          } else {
            var clientInfo = {
              clientId: data.id,
              socketId: socket.id,
              isPending: false
            }
            clients[data.room] = {
              owner: clientInfo,
              members: [clientInfo] 
            };
          }
          console.log(data.id + "is joining " + data.room);
          io.to(data.room).emit('UPDATE_MEMBERS', clients[data.room])
          console.log(clients);
        }

        
    });

    socket.on('LEAVE_SHAREBOX', function(data){
      for (var i = clients[data.room].members.length - 1; i >= 0; i--) {
        if(clients[data.room].members[i].clientId == data.id){
          clients[data.room].members.splice(index, i);
          io.to(data.room).emit('UPDATE_MEMBERS', clients[data.room])
        }
        
      };
      
    })
    
    socket.on('REMOVE_USER', function(data){
      for (var i = clients[data.room].members.length - 1; i >= 0; i--) {
        if(clients[data.room].members[i].clientId == data.removeId){
          var sid = clients[data.room].members[i].socketId
          clients[data.room].members.splice(i, 1);
          io.to(sid).emit('BE_REMOVED')
          console.log(sid)
          io.to(data.room).emit('UPDATE_MEMBERS', clients[data.room])
        }
        console.log(clients)
        
      };
      
    })

    socket.on('send', function(data) {
      console.log(data.room)
        socket.broadcast.to(data.room).emit('message', data.data);
        console.log("send received" + socket.id)
    });

    socket.on('ADD_USER', function(data) {
      var clientInfo = {
          clientId: data.inviteId,
          socketId: 0,
          isPending: true
      }
      clients[data.room].members.push(clientInfo);
      socket.broadcast.emit('INVITE_JOIN', data);
      io.to(data.room).emit('UPDATE_MEMBERS', clients[data.room])
    })

    socket.on('INVITE_ACCEPT', function(data){
      socket.join(data.room);
      console.log(data.id + "is joining " + data.room)
      io.to(data.room).emit('NEW_MEMBER_JOINED', data);
    })

    socket.on('GET_MEMBERS', function(data){
      console.log(clients[data.room])
      io.to(data.room).emit('UPDATE_MEMBERS', clients[data.room])
    })

    socket.on('disconnect', function () {
      console.log("disconnected")

      var resultRoom = []
      var currentRoom = _.allKeys(clients);
      console.log(currentRoom)

      for (var i = currentRoom.length - 1; i >= 0; i--) {
        var roomName = currentRoom[i];

        var roomInfo = clients[roomName];
        console.log(roomInfo)
        var isOwner = (roomInfo.owner.socketId === socket.id)
        if (isOwner) {
          // owner quit then disbande the group
          clients[roomName] = null;
          io.to(roomName).emit('DISBAND_SHAREBOX');
        } else {
          clients[roomName].members = _.reject(clients[roomName].members, function (member){
            if(member.socketId === socket.id) {
              resultRoom.push(roomName);
              return true;
            } else {
              return false;
            }

          })
        }
      };

      for (var i = resultRoom.length - 1; i >= 0; i--) {
        var roomKey = resultRoom[i]
        io.to(roomKey).emit('UPDATE_MEMBERS', clients[roomKey])
      };


    })

});


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}
